import requests
import time

TOKEN = '001.3277213606.1546113568:1011921225'
BASE_URL = 'https://myteam.mail.ru/bot/v1'

users_state = {}

CITIES = ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç']
LECTORS = ['–¢—É—Ä–º–∞–Ω–æ–≤–∞ –î.–ê.', '–°–µ–∫—É–æ–≤–∞ –®.–ë.']

LINKS = {
    '–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ª–æ–≤': 'https://delicate-klepon-16140e.netlify.app/',
    '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'https://example.com/consultation',
    '–Ø–≤–∫–∞ –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä': 'https://comforting-torrone-5273b1.netlify.app/'
}

OPTIONS = list(LINKS.keys()) + ['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç']

def send_buttons(chat_id, text, buttons, prefix):
    url = f'{BASE_URL}/messages/sendInteractive'
    params = {'token': TOKEN}
    data = {
        'chatId': chat_id,
        'parts': [{
            'text': text,
            'buttons': [{'text': b, 'callbackData': f"{prefix}:{b}"} for b in buttons]
        }]
    }
    requests.post(url, params=params, json=data)

def send_message(chat_id, text):
    url = f'{BASE_URL}/messages/sendText'
    params = {'token': TOKEN}
    data = {'chatId': chat_id, 'text': text}
    requests.post(url, params=params, data=data)

def send_main_menu(chat_id):
    send_buttons(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Astana Orleu.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", OPTIONS, "option")
    users_state[chat_id] = {'step': 'choose_option'}

def start_report(chat_id):
    users_state[chat_id] = {'step': 'choose_city', 'data': {}}
    send_buttons(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", CITIES, "city")

def process_message(chat_id, text):
    state = users_state.get(chat_id)

    if text.startswith("option:"):
        selected = text.split("option:", 1)[1]
        if selected == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç':
            start_report(chat_id)
        else:
            send_message(chat_id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {LINKS[selected]}")
            users_state.pop(chat_id, None)

    elif text.startswith("city:"):
        city = text.split("city:", 1)[1]
        state['data']['city'] = city
        state['step'] = 'choose_lector'
        send_buttons(chat_id, f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ç–æ—Ä–∞:", LECTORS, "lector")

    elif text.startswith("lector:"):
        lector = text.split("lector:", 1)[1]
        state['data']['lector'] = lector
        state['step'] = 'enter_date'
        send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –ª–µ–∫—Ç–æ—Ä: {lector}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–µ–º–∏–Ω–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∞—è):")

    elif state and state['step'] == 'enter_date':
        state['data']['date'] = text.strip()
        state['step'] = 'enter_start_sum'
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è (—Ç–≥):")

    elif state and state['step'] == 'enter_start_sum':
        if text.isdigit():
            state['data']['start_sum'] = int(text)
            state['data']['expenses'] = []
            state['step'] = 'enter_expense'
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–¢–∞–∫—Å–∏ –¥–æ –∑–∞–ª–∞: 960\n\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ '–≥–æ—Ç–æ–≤–æ'")
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

    elif state and state['step'] == 'enter_expense':
        data = state['data']
        if text.lower() == '–≥–æ—Ç–æ–≤–æ':
            total = sum(x[1] for x in data['expenses'])
            remainder = data['start_sum'] - total
            lines = [
                f"–≥. {data['city']}",
                f"–õ–µ–∫—Ç–æ—Ä: {data['lector']}",
                f"{data['date']}\n",
                f"–°—É–º–º–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è: {data['start_sum']} —Ç–≥\n",
                "–ó–∞—Ç—Ä–∞—Ç—ã:"
            ] + [f"{desc}: {amt} —Ç–≥" for desc, amt in data['expenses']] + [
                f"\n–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {total} —Ç–≥",
                f"–°—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–∞: {remainder} —Ç–≥"
            ]
            send_message(chat_id, '\n'.join(lines))
            users_state.pop(chat_id, None)
        else:
            if ':' in text:
                desc, amt_str = text.split(':', 1)
                amt_str = amt_str.strip().replace('—Ç–≥', '').strip()
                if amt_str.isdigit():
                    data['expenses'].append((desc.strip(), int(amt_str)))
                    send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {desc.strip()} ‚Äî {amt_str} —Ç–≥\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ '–≥–æ—Ç–æ–≤–æ'")
                else:
                    send_message(chat_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞'.")

def get_updates(last_event_id):
    url = f'{BASE_URL}/events/get'
    params = {
        'token': TOKEN,
        'lastEventId': last_event_id,
        'pollTime': 25
    }
    response = requests.get(url, params=params, timeout=30)
    return response.json()

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    last_event_id = 0
    while True:
        updates = get_updates(last_event_id)
        events = updates.get("events", [])
        if events:
            for event in events:
                last_event_id = event["eventId"]
                if event["type"] == "newMessage":
                    chat_id = event["payload"]["chat"]["chatId"]
                    message = event["payload"].get("text", "")
                    callback = event["payload"].get("callbackData")
                    if callback:
                        print(f"‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: {callback}")
                        process_message(chat_id, callback)
                    elif message:
                        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                        process_message(chat_id, message)
        else:
            time.sleep(1)

if __name__ == '__main__':
    main()